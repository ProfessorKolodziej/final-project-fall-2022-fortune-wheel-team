// Load CSS Reset from NPM
// CSS resets "normalize" how browser styles are applied.
// Try commenting this out and saving. What changes in the browser?
@import "~normalize.css";

// An example of a partial.
// Check out the _typography.scss file to edit the CSS inside!
@import "typography";

// You can still write styles in this file too.
// Here's an example of how you could write media queries more easily with Sass.

$large-phone: 500px;
$tablet-vertical: 768px;
$desktop: 1200px;

// And some color variables.
// Look how much easier it is to keep track of what these are than hex codes!

$red: #ab424a;
$orange: #dd7c00;
$green: #3b975f;
$blue: #4261ab;

h1 {
	color: white;
	padding-top: 1.5em;
	width: 30%;
	height: 50%;
	margin: auto;
	font-size: 50px;
	font-weight: bold;
}

h2 {
	width: 30%;
	height: 50%;
	margin: auto;
	font-size: 105%;
	padding-top: 4em;
	padding-bottom: 4em;
	line-height: 2em;
}

img {
	background-color: #dd7c00;
	border-radius: 20px;
	width: 60px;
	height: 60px;
}

.background-text-image {
	text-align: center;
	color: white;
	top: 0;
}

.intro-text {
	position: absolute;
	top: 50px;
}

h3 {
	text-align: center;
	padding-top: 10em;
}

#background-image {
	position: relative;
	width: 100%;
	height: 100%;
	border-radius: 0;
}

.food-icons {
	display: grid;
	grid-template-columns: repeat(4, 1fr);
	gap: 0;
	grid-auto-rows: minmax(50px, 80px);
	padding: 100px;
	padding-top: 0.5em;
}

ul {
	list-style: none;
}

svg {
	display: block;
	max-width: 500px;
	margin: 0 auto;
	transform: rotate(90deg);
}

.wheel {
	animation-name: spin;
}

.animate {
	-webkit-animation-name: spin;
	-webkit-animation-duration: 2000ms;
	-webkit-animation-iteration-count: 5;
	-webkit-animation-timing-function: linear;
	-moz-animation-name: spin;
	-moz-animation-duration: 2000ms;
	-moz-animation-iteration-count: 5;
	-moz-animation-timing-function: linear;
	-ms-animation-name: spin;
	-ms-animation-duration: 2000ms;
	-ms-animation-iteration-count: 5;
	-ms-animation-timing-function: linear;
	animation-name: spin;
	animation-duration: 2000ms;
	animation-iteration-count: 5;
	animation-timing-function: linear;
}

@-ms-keyframes spin {
	from {
		-ms-transform: rotate(0deg);
	}

	to {
		-ms-transform: rotate(360deg);
	}
}

@-moz-keyframes spin {
	from {
		-moz-transform: rotate(0deg);
	}

	to {
		-moz-transform: rotate(360deg);
	}
}

@-webkit-keyframes spin {
	from {
		-webkit-transform: rotate(0deg);
	}

	to {
		-webkit-transform: rotate(360deg);
	}
}

@keyframes spin {
	from {
		transform: rotate(0deg);
	}

	to {
		transform: rotate(360deg);
	}
}

[alt="1"] {
	position: relative;
	z-index: 10;
	height: 200px;
	width: 200px;
	top: 45em;
	left: 0.3em;
	margin: auto;
	transform: rotate(25deg);
	background-color: transparent;
}

h4 {
	background: #dd7c00;
	color: white;
	border-radius: 20px;
	width: 70px;
	height: 30px;
	margin: 3em auto;
	padding-top: 0.3em;
}

h4:hover {
	background-color: #ab424a;
}

.page-heading {
	// Sass lets you write your media queries inline if you want.
	// This is why I'm always forgetting I have to put the class inside
	// the media query in regular CSS. I never have to in Sass!
	// I like combining these with variables to make it easier to read
	// my media queries.

	@media screen and (min-width: $large-phone) {
		color: $orange;
	}

	@media screen and (min-width: $tablet-vertical) {
		color: $green;
	}

	@media screen and (min-width: $desktop) {
		color: $blue;
	}
}
